#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -eo pipefail

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BP_DIR=$(cd $(dirname $0); cd ..; pwd)

# Output helpers
indent() {
  sed -u 's/^/       /'
}

puts_step() {
  echo "-----> $@"
}

puts_info() {
  echo "       $@"
}

# Python version (default to 3.11 if not specified)
PYTHON_VERSION=${PYTHON_VERSION:-3.11}

puts_step "Detected Python Flask app with pyproject.toml"

# Check if runtime.txt exists for Python version specification
if [ -f "$BUILD_DIR/runtime.txt" ]; then
  PYTHON_VERSION=$(cat "$BUILD_DIR/runtime.txt" | sed 's/python-//')
  puts_info "Using Python version from runtime.txt: $PYTHON_VERSION"
else
  puts_info "Using default Python version: $PYTHON_VERSION"
fi

# Set up Python environment
puts_step "Installing Python $PYTHON_VERSION"

# Check if Python is already installed
if command -v python3 &> /dev/null; then
  INSTALLED_VERSION=$(python3 --version | cut -d' ' -f2)
  puts_info "Python $INSTALLED_VERSION already installed"
else
  puts_info "Python not found in environment"
fi

# Bootstrap pip if it's not available
puts_step "Bootstrapping pip"
if ! python3 -m pip --version &> /dev/null; then
  puts_info "pip not found, bootstrapping..."
  
  # Try ensurepip first
  if python3 -m ensurepip --version &> /dev/null 2>&1; then
    puts_info "Using ensurepip to bootstrap pip"
    python3 -m ensurepip --upgrade --default-pip 2>&1 | indent
  else
    # Fall back to get-pip.py
    puts_info "Downloading get-pip.py"
    curl -sS https://bootstrap.pypa.io/get-pip.py -o /tmp/get-pip.py
    python3 /tmp/get-pip.py --user 2>&1 | indent
    rm /tmp/get-pip.py
    export PATH="$HOME/.local/bin:$PATH"
  fi
else
  puts_info "pip is already available"
fi

# Install pip and virtualenv to user directory first
puts_step "Setting up Python environment"
python3 -m pip install --user --upgrade pip virtualenv 2>&1 | indent
export PATH="$HOME/.local/bin:$PATH"

# Create virtual environment using virtualenv (more portable than venv)
puts_step "Creating virtual environment"
mkdir -p "$BUILD_DIR/.heroku"
python3 -m virtualenv "$BUILD_DIR/.heroku/python" 2>&1 | indent

# Activate virtual environment
export PATH="$BUILD_DIR/.heroku/python/bin:$PATH"
export VIRTUAL_ENV="$BUILD_DIR/.heroku/python"

puts_info "Virtual environment created at $VIRTUAL_ENV"

# Upgrade pip in the virtual environment
puts_step "Upgrading pip"
pip install --upgrade pip 2>&1 | indent

# Install build dependencies
puts_step "Installing build tools"
pip install --upgrade setuptools wheel build 2>&1 | indent

# Install dependencies from pyproject.toml
puts_step "Installing dependencies from pyproject.toml"

if [ -f "$BUILD_DIR/pyproject.toml" ]; then
  cd "$BUILD_DIR"
  
  # Check if we should install in editable mode or as a package
  if grep -q "\[project\]" pyproject.toml || grep -q "\[tool.poetry\]" pyproject.toml; then
    puts_info "Installing project with dependencies"
    pip install . 2>&1 | indent
  else
    puts_info "Installing dependencies only"
    pip install . 2>&1 | indent
  fi
  
  puts_info "Dependencies installed successfully"
else
  puts_info "No pyproject.toml found, skipping dependency installation"
fi

# Install gunicorn for production serving (if not already installed)
puts_step "Installing gunicorn for production"
pip install gunicorn 2>&1 | indent

# Create .profile.d directory for runtime environment
puts_step "Creating runtime environment configuration"
mkdir -p "$BUILD_DIR/.profile.d"

cat > "$BUILD_DIR/.profile.d/python.sh" <<EOF
export PATH="\$HOME/.heroku/python/bin:\$PATH"
export VIRTUAL_ENV="\$HOME/.heroku/python"
export PYTHONUNBUFFERED=1
export PYTHONHOME="\$HOME/.heroku/python"
EOF

puts_info "Runtime environment configured"

# Store build metadata
puts_step "Storing build metadata"
echo "$PYTHON_VERSION" > "$BUILD_DIR/.heroku/python-version"

puts_step "Build complete!"
puts_info "To run your app, use: gunicorn app:app"

